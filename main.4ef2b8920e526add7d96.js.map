{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","loggering","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","reject","logSuccess","logError","warn","amount","catch"],"mappings":"yLAIMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAEjBC,YAAW,WAETD,EAAQF,KACVA,OAKEI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAEjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACtCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAO3DC,EAAY,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAKhDN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAInC,IAIMG,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhClB,GAL2BiB,EAKM,IALDC,EAKM,IAJrCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAK9CK,EAAKN,EAAYM,GAEvB,OAAO,IAAI1B,SAAQ,SAACC,EAAS0B,GAC3BzB,YAAW,WACUqB,KAAKE,SAAW,GAGjCxB,EAAQ,CAACyB,KAAItB,SAEbuB,EAAOD,KAERtB,OAIDwB,EAAa,SAAC,GAAe,IAAdF,EAAc,EAAdA,GAAItB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIyB,EAAW,SAAAH,GACfrB,QAAQyB,KAAR,gCAA6CJ,EAA7C,8BAMFP,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.4ef2b8920e526add7d96.js","sourcesContent":["import './styles.css';\n\n// =================================================================  Задание 1 =============================================================================\n\nconst delay = ms => {\n  return new Promise(resolve => {\n\n    setTimeout(() => {\n    \n      resolve(ms)\n  },ms)\n    \n  })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// =================================================================  Задание 2 =============================================================================\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n    resolve(updatedUsers)\n  })\n  \n};\n\nconst loggering = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(loggering);\ntoggleUserState(users, 'Lux').then(loggering);\n\n// =================================================================  Задание 3 =============================================================================\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const time = randomIntegerFromInterval(200, 500);\n  const id = transaction.id;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({id, time});\n      } else {\n        reject(id);\n      }\n    }, time);\n  });\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}